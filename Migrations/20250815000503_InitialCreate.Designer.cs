// <auto-generated />
using System;
using DrzewaAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DrzewaAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250815000503_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DrzewaAPI.Models.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AttachmentsZipUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Justification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MunicipalityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PdfUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TreeReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MunicipalityId");

                    b.HasIndex("TreeReportId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("DrzewaAPI.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLegend")
                        .HasColumnType("bit");

                    b.Property<Guid>("TreeReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TreeReportId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("DrzewaAPI.Models.Municipality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Municipalities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            Address = "Street 15",
                            City = "Warszawa",
                            Email = "urząd@warszawa.pl",
                            Name = "GminaWarszawska",
                            Province = "Mazowieckie",
                            ZipCode = "24-040"
                        });
                });

            modelBuilder.Entity("DrzewaAPI.Models.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DataJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("DrzewaAPI.Models.SpeciesAdditionRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentificationGuide")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LatinName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PolishName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeasonalChanges")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SpeciesAdditionRequests");
                });

            modelBuilder.Entity("DrzewaAPI.Models.SpeciesImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SpeciesImages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666666"),
                            Description = "Zdjęcie dęba szypułkowego",
                            ImageUrl = "fileUrl",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("77777777-7777-7777-7777-777777777777"),
                            Description = "Zdjęcie liścia sosny zwyczajnej",
                            ImageUrl = "fileUrl",
                            Type = 2
                        });
                });

            modelBuilder.Entity("DrzewaAPI.Models.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            Name = "Posusz"
                        },
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            Name = "Niestabilny"
                        });
                });

            modelBuilder.Entity("DrzewaAPI.Models.TreeConditionTags", b =>
                {
                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TreeReportId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TagId", "TreeReportId");

                    b.HasIndex("TreeReportId");

                    b.ToTable("TreeConditionTags");

                    b.HasData(
                        new
                        {
                            TagId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            TreeReportId = new Guid("44444444-4444-4444-4444-444444444444")
                        },
                        new
                        {
                            TagId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            TreeReportId = new Guid("44444444-4444-4444-4444-444444444444")
                        });
                });

            modelBuilder.Entity("DrzewaAPI.Models.TreeReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Circumference")
                        .HasMaxLength(6)
                        .HasColumnType("int");

                    b.Property<int>("CommentsCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int?>("EstimatedAge")
                        .HasColumnType("int");

                    b.Property<string>("FeaturedLegend")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsAlive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNatureMonument")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<string>("LocationDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<Guid>("SpeciesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VotesCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SpeciesId");

                    b.HasIndex("UserId");

                    b.ToTable("TreeReports");

                    b.HasData(
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            Circumference = 300,
                            CommentsCount = 0,
                            CreatedAt = new DateTime(2025, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Fajne drzewo",
                            EstimatedAge = 150,
                            IsAlive = true,
                            IsNatureMonument = true,
                            IsVerified = true,
                            Latitude = 500.0,
                            LocationDescription = "Miasto: Warszawa\nUlica: 3 maja",
                            Longitude = 100.0,
                            SpeciesId = new Guid("22222222-2222-2222-2222-222222222222"),
                            Status = 1,
                            UserId = new Guid("11111111-1111-1111-1111-111111111111"),
                            VotesCount = 0
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            Circumference = 220,
                            CommentsCount = 0,
                            CreatedAt = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Martwe drzewo",
                            EstimatedAge = 240,
                            IsAlive = false,
                            IsNatureMonument = false,
                            IsVerified = false,
                            Latitude = 400.0,
                            LocationDescription = "Miasto: Warszawa\nUlica: Wyspiańskiego",
                            Longitude = 210.0,
                            SpeciesId = new Guid("33333333-3333-3333-3333-333333333333"),
                            Status = 0,
                            UserId = new Guid("11111111-1111-1111-1111-111111111111"),
                            VotesCount = 0
                        });
                });

            modelBuilder.Entity("DrzewaAPI.Models.TreeReportAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TreeReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TreeReportId");

                    b.ToTable("TreeReportAttachments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("88888888-8888-8888-8888-888888888888"),
                            FileName = "Obrazek pnia dębu",
                            FileSize = 0L,
                            FileUrl = "fileUrl",
                            TreeReportId = new Guid("44444444-4444-4444-4444-444444444444"),
                            Type = 0,
                            UploadedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("99999999-9999-9999-9999-999999999999"),
                            FileName = "Obrazek liścia dębu",
                            FileSize = 0L,
                            FileUrl = "fileUrl",
                            TreeReportId = new Guid("44444444-4444-4444-4444-444444444444"),
                            Type = 0,
                            UploadedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            FileName = "Obrazek pnia sosny",
                            FileSize = 0L,
                            FileUrl = "fileUrl",
                            TreeReportId = new Guid("55555555-5555-5555-5555-555555555555"),
                            Type = 0,
                            UploadedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("DrzewaAPI.Models.TreeSpecies", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("IdentificationGuide")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LatinName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PolishName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SeasonalChanges")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.ToTable("TreeSpecies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            Category = 1,
                            Description = "Dąb szypułkowy to jeden z najpopularniejszych gatunków drzew w Polsce.",
                            LatinName = "Quercus robur",
                            PolishName = "Dąb szypułkowy"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            Category = 0,
                            Description = "Sosna zwyczajna to charakterystyczne drzewo iglaste występujące w Polsce.",
                            LatinName = "Pinus sylvestris",
                            PolishName = "Sosna zwyczajna"
                        });
                });

            modelBuilder.Entity("DrzewaAPI.Models.TreeSpeciesImages", b =>
                {
                    b.Property<Guid>("TreeSpeciesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TreeSpeciesId", "ImageId");

                    b.HasIndex("ImageId");

                    b.ToTable("TreeSpeciesImages");

                    b.HasData(
                        new
                        {
                            TreeSpeciesId = new Guid("22222222-2222-2222-2222-222222222222"),
                            ImageId = new Guid("66666666-6666-6666-6666-666666666666")
                        },
                        new
                        {
                            TreeSpeciesId = new Guid("33333333-3333-3333-3333-333333333333"),
                            ImageId = new Guid("77777777-7777-7777-7777-777777777777")
                        });
                });

            modelBuilder.Entity("DrzewaAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ekowojownik@gmail.com",
                            FirstName = "Eko",
                            IsActive = false,
                            LastName = "Wojownik",
                            PasswordHash = "VerySafe"
                        });
                });

            modelBuilder.Entity("DrzewaAPI.Models.Vote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TreeReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TreeReportId");

                    b.HasIndex("UserId", "TreeReportId")
                        .IsUnique();

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("DrzewaAPI.Models.Application", b =>
                {
                    b.HasOne("DrzewaAPI.Models.Municipality", "Municipality")
                        .WithMany("Applications")
                        .HasForeignKey("MunicipalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrzewaAPI.Models.TreeReport", "TreeReport")
                        .WithOne("Application")
                        .HasForeignKey("DrzewaAPI.Models.Application", "TreeReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrzewaAPI.Models.User", "User")
                        .WithMany("Applications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Municipality");

                    b.Navigation("TreeReport");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DrzewaAPI.Models.Comment", b =>
                {
                    b.HasOne("DrzewaAPI.Models.TreeReport", "TreeReport")
                        .WithMany("Comments")
                        .HasForeignKey("TreeReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrzewaAPI.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TreeReport");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DrzewaAPI.Models.Notification", b =>
                {
                    b.HasOne("DrzewaAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DrzewaAPI.Models.SpeciesAdditionRequest", b =>
                {
                    b.HasOne("DrzewaAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DrzewaAPI.Models.TreeConditionTags", b =>
                {
                    b.HasOne("DrzewaAPI.Models.Tag", "Tags")
                        .WithMany("ConditionTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrzewaAPI.Models.TreeReport", "TreeReports")
                        .WithMany("ConditionTags")
                        .HasForeignKey("TreeReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tags");

                    b.Navigation("TreeReports");
                });

            modelBuilder.Entity("DrzewaAPI.Models.TreeReport", b =>
                {
                    b.HasOne("DrzewaAPI.Models.TreeSpecies", "Species")
                        .WithMany("TreeReports")
                        .HasForeignKey("SpeciesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DrzewaAPI.Models.User", "User")
                        .WithMany("TreeReports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Species");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DrzewaAPI.Models.TreeReportAttachment", b =>
                {
                    b.HasOne("DrzewaAPI.Models.TreeReport", "TreeReport")
                        .WithMany("Attachments")
                        .HasForeignKey("TreeReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TreeReport");
                });

            modelBuilder.Entity("DrzewaAPI.Models.TreeSpeciesImages", b =>
                {
                    b.HasOne("DrzewaAPI.Models.SpeciesImage", "SpeciesImage")
                        .WithMany("TreeSpeciesImages")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrzewaAPI.Models.TreeSpecies", "TreeSpecies")
                        .WithMany("TreeSpeciesImages")
                        .HasForeignKey("TreeSpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SpeciesImage");

                    b.Navigation("TreeSpecies");
                });

            modelBuilder.Entity("DrzewaAPI.Models.Vote", b =>
                {
                    b.HasOne("DrzewaAPI.Models.TreeReport", "TreeReport")
                        .WithMany("Votes")
                        .HasForeignKey("TreeReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrzewaAPI.Models.User", "User")
                        .WithMany("Votes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TreeReport");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DrzewaAPI.Models.Municipality", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("DrzewaAPI.Models.SpeciesImage", b =>
                {
                    b.Navigation("TreeSpeciesImages");
                });

            modelBuilder.Entity("DrzewaAPI.Models.Tag", b =>
                {
                    b.Navigation("ConditionTags");
                });

            modelBuilder.Entity("DrzewaAPI.Models.TreeReport", b =>
                {
                    b.Navigation("Application");

                    b.Navigation("Attachments");

                    b.Navigation("Comments");

                    b.Navigation("ConditionTags");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("DrzewaAPI.Models.TreeSpecies", b =>
                {
                    b.Navigation("TreeReports");

                    b.Navigation("TreeSpeciesImages");
                });

            modelBuilder.Entity("DrzewaAPI.Models.User", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Comments");

                    b.Navigation("TreeReports");

                    b.Navigation("Votes");
                });
#pragma warning restore 612, 618
        }
    }
}
