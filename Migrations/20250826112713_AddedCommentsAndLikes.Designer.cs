// <auto-generated />
using System;
using DrzewaAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DrzewaAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250826112713_AddedCommentsAndLikes")]
    partial class AddedCommentsAndLikes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DrzewaAPI.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<DateTime>("DatePosted")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsLegend")
                        .HasColumnType("bit");

                    b.Property<Guid>("TreeSubmissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TreeSubmissionId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("DrzewaAPI.Models.Like", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("UserId", "CommentId")
                        .IsUnique();

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("DrzewaAPI.Models.TreeSpecies", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Family")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("IdentificationGuide")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LatinName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PolishName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("TreeSpecies");
                });

            modelBuilder.Entity("DrzewaAPI.Models.TreeSpeciesImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AltText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TreeSpeciesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TreeSpeciesId");

                    b.ToTable("TreeSpeciesImages");
                });

            modelBuilder.Entity("DrzewaAPI.Models.TreeSubmission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Circumference")
                        .HasMaxLength(6)
                        .HasColumnType("int");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int?>("EstimatedAge")
                        .HasColumnType("int");

                    b.Property<double?>("Height")
                        .HasColumnType("float");

                    b.PrimitiveCollection<string>("Images")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAlive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMonument")
                        .HasColumnType("bit");

                    b.Property<Guid>("SpeciesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SpeciesId");

                    b.HasIndex("UserId");

                    b.ToTable("TreeSubmissions");
                });

            modelBuilder.Entity("DrzewaAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Avatar")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime>("RegistrationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("Role")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DrzewaAPI.Models.Vote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TreeSubmissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TreeSubmissionId");

                    b.HasIndex("UserId", "TreeSubmissionId")
                        .IsUnique();

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("DrzewaAPI.Models.Comment", b =>
                {
                    b.HasOne("DrzewaAPI.Models.TreeSubmission", "TreeSubmission")
                        .WithMany("Comments")
                        .HasForeignKey("TreeSubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrzewaAPI.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TreeSubmission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DrzewaAPI.Models.Like", b =>
                {
                    b.HasOne("DrzewaAPI.Models.Comment", "Comment")
                        .WithMany("Likes")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrzewaAPI.Models.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DrzewaAPI.Models.TreeSpecies", b =>
                {
                    b.OwnsOne("DrzewaAPI.Models.ValueObjects.SeasonalChanges", "SeasonalChanges", b1 =>
                        {
                            b1.Property<Guid>("TreeSpeciesId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Autumn")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Spring")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Summer")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Winter")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TreeSpeciesId");

                            b1.ToTable("TreeSpecies");

                            b1.WithOwner()
                                .HasForeignKey("TreeSpeciesId");
                        });

                    b.OwnsOne("DrzewaAPI.Models.ValueObjects.Traits", "Traits", b1 =>
                        {
                            b1.Property<Guid>("TreeSpeciesId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Lifespan")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int?>("MaxHeight")
                                .HasColumnType("int");

                            b1.Property<bool>("NativeToPoland")
                                .HasColumnType("bit");

                            b1.HasKey("TreeSpeciesId");

                            b1.ToTable("TreeSpecies");

                            b1.WithOwner()
                                .HasForeignKey("TreeSpeciesId");
                        });

                    b.Navigation("SeasonalChanges");

                    b.Navigation("Traits");
                });

            modelBuilder.Entity("DrzewaAPI.Models.TreeSpeciesImage", b =>
                {
                    b.HasOne("DrzewaAPI.Models.TreeSpecies", "TreeSpecies")
                        .WithMany("Images")
                        .HasForeignKey("TreeSpeciesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TreeSpecies");
                });

            modelBuilder.Entity("DrzewaAPI.Models.TreeSubmission", b =>
                {
                    b.HasOne("DrzewaAPI.Models.TreeSpecies", "Species")
                        .WithMany("TreeSubmissions")
                        .HasForeignKey("SpeciesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DrzewaAPI.Models.User", "User")
                        .WithMany("TreeSubmissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("DrzewaAPI.Models.ValueObjects.Location", "Location", b1 =>
                        {
                            b1.Property<Guid>("TreeSubmissionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<double>("Lat")
                                .HasColumnType("float");

                            b1.Property<double>("Lng")
                                .HasColumnType("float");

                            b1.HasKey("TreeSubmissionId");

                            b1.ToTable("TreeSubmissions");

                            b1.WithOwner()
                                .HasForeignKey("TreeSubmissionId");
                        });

                    b.Navigation("Location")
                        .IsRequired();

                    b.Navigation("Species");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DrzewaAPI.Models.Vote", b =>
                {
                    b.HasOne("DrzewaAPI.Models.TreeSubmission", "TreeSubmission")
                        .WithMany("Votes")
                        .HasForeignKey("TreeSubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrzewaAPI.Models.User", "User")
                        .WithMany("Votes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TreeSubmission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DrzewaAPI.Models.Comment", b =>
                {
                    b.Navigation("Likes");
                });

            modelBuilder.Entity("DrzewaAPI.Models.TreeSpecies", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("TreeSubmissions");
                });

            modelBuilder.Entity("DrzewaAPI.Models.TreeSubmission", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("DrzewaAPI.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");

                    b.Navigation("TreeSubmissions");

                    b.Navigation("Votes");
                });
#pragma warning restore 612, 618
        }
    }
}
